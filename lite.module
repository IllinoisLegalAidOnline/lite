<?php

/**
 * @file
 * Integrates the lite track changes plugin for CKEditor with Drupal.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\user\Entity\Role;

/**
 * Implements hook_libraries_info().
 */
function lite_libraries_info() {
  return [
    'lite' => [
      'name' => 'LITE',
      'vendor url' => 'http://www.loopindex.com/portfolio-item/track-changes-plugin/',
      'download url' => 'http://ckeditor.com/addon/lite',
      'version arguments' => [
        'file' => 'plugin.js',
        // /* Source version: 1.2.26 */
        'pattern' => '/Source version: (\d+\.\d+\.\d+)/',
        'lines' => 1,
      ],
      'files' => [
        'js' => [
          'lite-includes.js',
          'lite-interface.js',
          'plugin.js',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_element_info_alter().
 */
function lite_element_info_alter(array &$types) {
  // Our process callback must run immediately after
  // TextFormat::processFormat().
  if (isset($types['text_format']) && isset($types['text_format']['#process'])) {
    $search_value = ['Drupal\filter\Element\TextFormat', 'processFormat'];
    $key = array_search($search_value, $types['text_format']['#process']);

    if ($key !== FALSE) {
      $key++;
      array_splice($types['text_format']['#process'], $key, 0, 'lite_filter_process_format');
    }
    else {
      $types['text_format']['#process'][] = 'lite_filter_process_format';
    }
  }
}

/**
 * Process callback for form elements that have a text format selector attached.
 *
 * This callback runs after filter_process_format() and performs additional
 * modifications to the form element.
 *
 * @see \Drupal\filter\Element\TextFormat::processFormat()
 */
function lite_filter_process_format(&$element, FormStateInterface $form_state, &$complete_form) {
  // Retrieve the form object from $form_state.
  $form_object = $form_state->getFormObject();

  // Check to see if we're working with a content entity form.
  if ($form_object instanceof ContentEntityForm) {

    // Retrieve the entity related to the form.
    $entity = $form_state->getFormObject()->getEntity();

    // If the entity is new (being created) then disable tracking in order to
    // prevent users from becoming confused if their initial content does not
    // show up after saving the entity unless they've pressed the "accept all
    // changes" button.
    if ($entity->isNew()) {
      $element['#pre_render'][] = 'lite_disable_tracking';
    }
  }

  return $element;
}

/**
 * Pre-render function to disable text tracking on new entity creation.
 *
 * @see lite_filter_process_format()
 */
function lite_disable_tracking($element) {
  // Retrieve the available formats for the current text_format.
  $format_options = $element['format']['format']['#options'];

  // Loop through each of the available formats, adding a JS setting which
  // disabled tracking for each.
  foreach ($format_options as $format => $label) {
    if (isset($element['#attached']['drupalSettings']['editor']['formats'][$format]['editorSettings'])) {
      $editor_settings = &$element['#attached']['drupalSettings']['editor']['formats'][$format]['editorSettings'];
      // If Do not start on new entity is checked.
      if (isset($editor_settings['lite']['disable_new']) && $editor_settings['lite']['disable_new']) {
        // Disable tracking passing variables directly to Lite plugin.
        $editor_settings['lite']['isTracking'] = FALSE;
      }
    }
  }

  return $element;
}


/**
 * Return user permissions filtered to this module.
 *
 * @param NULL|Drupal\user\Entity\User $user
 *   Drupal User object or NULL to load current user.
 *
 * @return Array
 *   List of lite permissions without spaces.
 */
function lite_get_permissions($user = NULL) {
  $permissions = $user_permissions = [];

  if (!$user) {
    $user = \Drupal::currentUser();
  }

  $roles = $user->getRoles();
  // Specific Admin case, because Drupal return an empty array.
  foreach ($roles as $role) {
    $role = Role::load($role);
    if ($role->isAdmin()) {
      $user_permissions =  array_keys(\Drupal::service('user.permissions')->getPermissions());
    }
  }

  // For a regular user we load permissions.
  if (!count($user_permissions)) {
    $all_user_permissions = user_role_permissions($roles);
    if (count($all_user_permissions)) {
      $user_permissions = array_merge($all_user_permissions, $all_user_permissions);
      $user_permissions = end($user_permissions);
    }
  }

  // We filter permissions to get only lite related.
  foreach ($user_permissions as $permission) {
    if (strpos($permission, 'lite') !== FALSE) {
      $permissions[] = str_replace(' ', '_', str_replace('lite ', '', $permission));
    }
  }

  return $permissions;
}


/**
 * Permission callback for Lite's lite.permissions.yml.
 *
 * @see lite.permissions.yml
 */
function lite_permissions() {
  $permissions = [];
  $formats = [];

  // We can stop here if permission by formats is not enable.
  $config = \Drupal::config('lite.settings');
  $permissions_by_formats = $config->get('permissions_by_formats');
  if (!$permissions_by_formats) {
    return $permissions;
  }

  // Build a list of formats with lite enabled.
  $filter_formats = filter_formats();
  foreach ($filter_formats as $format => $filter_format) {
    $filters = $filter_format->get('filters');
    if (isset($filters['lite'])) {
      $formats[$filter_format->id()] = $filter_format->label();
    }
  }

  // Create permissions for each text format.
  $tracking_permissions = [
    'lite toggle' => [
      'base_title' => '%format: May enable or disable tracking',
    ],
    'lite resolve' => [
      'base_title' => '%format: May resolve changes',
    ],
  ];
  foreach ($formats as $id => $format_name) {
    foreach ($tracking_permissions as $tracking_permission => $tracking_info) {
      $permissions[$tracking_permission . ' ' . $id] = [
        'title' => t($tracking_info['base_title'], ['%format' => $format_name]),
        'description' => t('Ensure user can use this format to be able to ensure this permission.'),
      ];
    }
  }

  return $permissions;
}
